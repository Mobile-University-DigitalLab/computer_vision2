rm(list=ls())
#if (!require(devtools))
#  install.packages("devtools")
#install.packages("ROpenCVLite")
#library(ROpenCVLite)
#devtools::install_github("swarm-lab/Rvision")
library(Rvision)
# Find the path to the balloon1.png image provided with Rvision
path_to_image <- system.file("sample_img", "balloon1.png", package = "Rvision")
# Load the image in memory
my_image <- image(filename = path_to_image)
plot(my_image)
#if (!require(devtools))
#  install.packages("devtools")
#install.packages("ROpenCVLite")
#library(ROpenCVLite)
#devtools::install_github("swarm-lab/Rvision")
library(Rvision)
# Find the path to the balloon1.png image provided with Rvision
path_to_image <- system.file("sample_img", "balloon1.png", package = "Rvision")
# Load the image in memory
my_image <- image(filename = path_to_image)
plot(my_image)
my_file_img <- image(system.file("sample_img", "bunny.png", package = "Rvision"))
my_file_img <- image(../images/Riedlingen.jpeg)
my_file_img <- image(./images/Riedlingen.jpeg)
my_file_img <- image("./images/Riedlingen.jpeg")
my_file_img <- image("../images/Riedlingen.jpeg")
my_file_img <- image("../images/Riedlingen.jpg")
write.Image(my_file_img, paste0(tempdir(), "/Riedlingen_export.png"))
isImage(my_file_img)
dim(my_file_img)
nrow(my_file_img)
ncol(my_file_img)
bitdepth(my_file_img)
colorspace(my_file_img)
plot(my_file_img)
my_file_img_gray <- changeColorSpace(my_file_img, "GRAY")
plot(my_file_img_gray)
my_channels <- split(my_file_img) # Order of channels is Blue, Green, Red, Alpha
layout(matrix(1:4, 2, 2, byrow = TRUE))
invisible(lapply(my_channels, plot))  # 'invisible' is used to hide the console output. It is not necessary otherwise.
my_merged_channels <- merge(my_channels)
plot(my_merged_channels)
img <- image("../macaw-943228_1280.jpg")
img <- image("../images/macaw-943228_1280.jpg")
boxFilter(img, k_height = 25, k_width = 25) %>% plot()
img <- image("../images/macaw-943228_1280.jpg")
library(dplyr)
if (!require(dplyr)
install.packages("dplyr")
if (require("dplyr")
install.packages("dplyr")
install.packages("dplyr")
img <- image("../images/macaw-943228_1280.jpg")
library(dplyr)
boxFilter(img, k_height = 25, k_width = 25) %>% plot()
gaussianBlur(img, k_height = 25, k_width = 25, sigma_x = 5, sigma_y = 5) %>% plot()
medianBlur(img, k_size = 25) %>% plot()
sqrBoxFilter(img, k_height = 25, k_width = 25) %>% plot()
sobel(img) %>% plot()
img1 <- cloneImage(img)
drawCircle(img1, x = 750, y = 750, radius = 200, color = "blue",
thickness = 10)
plot(img1)
img <- image("mundms.jpg")
img <- image("../images/mundms.jpg")
img <- image("../images/mundms.png")
plot(img)
blob_fun <- function(img, fun, color = character()) {
img %>%
split() %>%
do.call(fun, .) %>%
medianBlur(15) %>%
simpleBlobDetector(max_area = Inf, min_area = 10, blob_color = 255,
filter_by_convexity = FALSE,
filter_by_inertia = FALSE, min_threshold = 0) %>%
mutate(color = color)
}
multi_draw <- function(img, blobs) {
if (nrow(blobs) > 0) {
for (i in 1:nrow(blobs)) {
drawRectangle(img,
blobs$x[i] - 1 + blobs$size[i],
blobs$y[i] - 1 + blobs$size[i],
blobs$x[i] - 1 - blobs$size[i],
blobs$y[i] - 1 - blobs$size[i],
thickness = 5, color = blobs$color[1])
}
}
}
blue <-   function(B, G, R) B > 150 & R < 200 & G < 200
red <-    function(B, G, R) R > 150 & B < 200 & G < 150
green <-  function(B, G, R) G > 150 & B < 200 & R < 200
yellow <- function(B, G, R) G > 150 & B < 200 & B > 150 & R > 150
orange <- function(B, G, R) G > 150 & B < 150 & R > 150
blue_mms <-   blob_fun(my_img, blue, "blue")
blue_mms <-   blob_fun(img, blue, "blue")
red_mms <-    blob_fun(img, red, "red")
green_mms <-  blob_fun(img, green, "green")
yellow_mms <- blob_fun(img, yellow, "yellow")
orange_mms <- blob_fun(img, orange, "orange")
blue_mms <-   blob_fun(img, blue, "blue")
red_mms <-    blob_fun(img, red, "red")
green_mms <-  blob_fun(img, green, "green")
yellow_mms <- blob_fun(img, yellow, "yellow")
orange_mms <- blob_fun(img, orange, "orange")
multi_draw(img, blue_mms)
multi_draw(img, red_mms)
multi_draw(img, green_mms)
multi_draw(img, yellow_mms)
multi_draw(img, orange_mms)
plot(img)
img <- image("../images/snookerwm2024eurosport.png")
img <- image("../images/snookerwm2024eurosport.jpg")
plot(img)
blob_fun <- function(img, fun, color = character()) {
img %>%
split() %>%
do.call(fun, .) %>%
medianBlur(15) %>%
simpleBlobDetector(max_area = Inf, min_area = 10, blob_color = 255,
filter_by_convexity = FALSE,
filter_by_inertia = FALSE, min_threshold = 0) %>%
mutate(color = color)
}
multi_draw <- function(img, blobs) {
if (nrow(blobs) > 0) {
for (i in 1:nrow(blobs)) {
drawRectangle(img,
blobs$x[i] - 1 + blobs$size[i],
blobs$y[i] - 1 + blobs$size[i],
blobs$x[i] - 1 - blobs$size[i],
blobs$y[i] - 1 - blobs$size[i],
thickness = 5, color = blobs$color[1])
}
}
}
blue <-   function(B, G, R) B > 150 & R < 200 & G < 200
red <-    function(B, G, R) R > 150 & B < 200 & G < 150
green <-  function(B, G, R) G > 150 & B < 200 & R < 200
yellow <- function(B, G, R) G > 150 & B < 200 & B > 150 & R > 150
orange <- function(B, G, R) G > 150 & B < 150 & R > 150
blue_mms <-   blob_fun(img, blue, "blue")
red_mms <-    blob_fun(img, red, "red")
green_mms <-  blob_fun(img, green, "green")
yellow_mms <- blob_fun(img, yellow, "yellow")
orange_mms <- blob_fun(img, orange, "orange")
multi_draw(img, blue_mms)
multi_draw(img, red_mms)
multi_draw(img, green_mms)
multi_draw(img, yellow_mms)
multi_draw(img, orange_mms)
plot(img)
img <- image("../images/snooker.jpg")
img <- image("../images/snooker2.jpg")
plot(img)
img <- image("../images/snooker2.jpg")
plot(img)
blob_fun <- function(img, fun, color = character()) {
img %>%
split() %>%
do.call(fun, .) %>%
medianBlur(15) %>%
simpleBlobDetector(max_area = Inf, min_area = 10, blob_color = 255,
filter_by_convexity = FALSE,
filter_by_inertia = FALSE, min_threshold = 0) %>%
mutate(color = color)
}
multi_draw <- function(img, blobs) {
if (nrow(blobs) > 0) {
for (i in 1:nrow(blobs)) {
drawRectangle(img,
blobs$x[i] - 1 + blobs$size[i],
blobs$y[i] - 1 + blobs$size[i],
blobs$x[i] - 1 - blobs$size[i],
blobs$y[i] - 1 - blobs$size[i],
thickness = 5, color = blobs$color[1])
}
}
}
blue <-   function(B, G, R) B > 150 & R < 200 & G < 200
red <-    function(B, G, R) R > 150 & B < 200 & G < 150
green <-  function(B, G, R) G > 150 & B < 200 & R < 200
yellow <- function(B, G, R) G > 150 & B < 200 & B > 150 & R > 150
orange <- function(B, G, R) G > 150 & B < 150 & R > 150
blue_mms <-   blob_fun(img, blue, "blue")
red_mms <-    blob_fun(img, red, "red")
green_mms <-  blob_fun(img, green, "green")
yellow_mms <- blob_fun(img, yellow, "yellow")
orange_mms <- blob_fun(img, orange, "orange")
multi_draw(img, blue_mms)
multi_draw(img, red_mms)
multi_draw(img, green_mms)
multi_draw(img, yellow_mms)
multi_draw(img, orange_mms)
plot(img)
rm(list=ls())
#if (!require(devtools))
#  install.packages("devtools")
#install.packages("ROpenCVLite")
#library(ROpenCVLite)
#devtools::install_github("swarm-lab/Rvision")
library(Rvision)
#if (!require(devtools))
#  install.packages("devtools")
#install.packages("ROpenCVLite")
#library(ROpenCVLite)
#devtools::install_github("swarm-lab/Rvision")
library(Rvision)
# Find the path to the balloon1.png image provided with Rvision
path_to_image <- system.file("sample_img", "balloon1.png", package = "Rvision")
# Load the image in memory
my_image <- image(filename = path_to_image)
plot(my_image)
my_file_img <- image("../images/Riedlingen.jpg")
write.Image(my_file_img, paste0(tempdir(), "/Riedlingen_export.png"))
isImage(my_file_img)
dim(my_file_img)
nrow(my_file_img)
ncol(my_file_img)
bitdepth(my_file_img)
colorspace(my_file_img)
plot(my_file_img)
my_file_img_gray <- changeColorSpace(my_file_img, "GRAY")
plot(my_file_img_gray)
my_channels <- split(my_file_img) # Order of channels is Blue, Green, Red, Alpha
layout(matrix(1:4, 2, 2, byrow = TRUE))
invisible(lapply(my_channels, plot))  # 'invisible' is used to hide the console output. It is not necessary otherwise.
my_merged_channels <- merge(my_channels)
plot(my_merged_channels)
img <- image("../images/macaw-943228_1280.jpg")
library(dplyr)
boxFilter(img, k_height = 25, k_width = 25) %>% plot()
gaussianBlur(img, k_height = 25, k_width = 25, sigma_x = 5, sigma_y = 5) %>% plot()
medianBlur(img, k_size = 25) %>% plot()
sqrBoxFilter(img, k_height = 25, k_width = 25) %>% plot()
sobel(img) %>% plot()
img1 <- cloneImage(img)
drawCircle(img1, x = 750, y = 750, radius = 200, color = "blue",
thickness = 10)
plot(img1)
img <- image("../images/snooker2.jpg")
plot(img)
blob_fun <- function(img, fun, color = character()) {
img %>%
split() %>%
do.call(fun, .) %>%
medianBlur(15) %>%
simpleBlobDetector(max_area = Inf, min_area = 10, blob_color = 255,
filter_by_convexity = FALSE,
filter_by_inertia = FALSE, min_threshold = 0) %>%
mutate(color = color)
}
multi_draw <- function(img, blobs) {
if (nrow(blobs) > 0) {
for (i in 1:nrow(blobs)) {
drawRectangle(img,
blobs$x[i] - 1 + blobs$size[i],
blobs$y[i] - 1 + blobs$size[i],
blobs$x[i] - 1 - blobs$size[i],
blobs$y[i] - 1 - blobs$size[i],
thickness = 5, color = blobs$color[1])
}
}
}
blue <-   function(B, G, R) B > 150 & R < 200 & G < 200
red <-    function(B, G, R) R > 150 & B < 200 & G < 150
green <-  function(B, G, R) G > 150 & B < 200 & R < 200
yellow <- function(B, G, R) G > 150 & B < 200 & B > 150 & R > 150
orange <- function(B, G, R) G > 150 & B < 150 & R > 150
blue_mms <-   blob_fun(img, blue, "blue")
red_mms <-    blob_fun(img, red, "red")
green_mms <-  blob_fun(img, green, "green")
yellow_mms <- blob_fun(img, yellow, "yellow")
orange_mms <- blob_fun(img, orange, "orange")
multi_draw(img, blue_mms)
multi_draw(img, red_mms)
multi_draw(img, green_mms)
multi_draw(img, yellow_mms)
multi_draw(img, orange_mms)
plot(img)
getwd()
